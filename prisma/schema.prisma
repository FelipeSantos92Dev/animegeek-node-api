// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  // referentialIntegrity = "prisma"
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String
  role       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  profile       Profile?
  refresh_token RefreshToken?
  cart          Cart[]
  @@map("users")
}

model RefreshToken {
  id         String @id @default(uuid())
  user_id    String @unique
  expires_in Int

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  @@map("refresh_token")
}

model Profile {
  id           String   @id @default(uuid())
  user_id      String   @unique
  name         String?  @default("")
  cellphone    String?  @default("")
  address      String?  @default("")
  number       String?  @default("")
  neighborhood String?  @default("")
  complement   String?  @default("")
  city         String?  @default("")
  state        String?  @default("")
  zipcode      String?  @default("")
  avatar       String?  @default("")
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  @@map("profiles")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  price       Int
  times       Int
  visible     Boolean
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  ticket Ticket[]
  @@map("categories")
}

model Cart {
  id         String   @id @default(uuid())
  code       String   @unique @default(uuid())
  user_id    String
  price      Int
  items      Json
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user        User         @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  ticket      Ticket[]
  transaction Transaction?
  @@map("carts")
}

model Ticket {
  id          String @id @default(uuid())
  cart_id     String
  category_id String

  cart     Cart     @relation(fields: [cart_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  category Category @relation(fields: [category_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  @@map("tickets")
}

model Transaction {
  id                  String   @id @default(uuid())
  code                String   @unique @default(uuid())
  cartCode            String   @unique
  status              String
  paymentType         String?
  installments        Int?
  total               Int?
  transactionId       Int?
  processorResponse   Json?
  customerEmail       String?
  customerName        String?
  customerMobile      String?
  customerDocument    String?
  billingAddress      String?
  billingNumber       String?
  billingNeighborhood String?
  billingCity         String?
  billingState        String?
  billingZipCode      String?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  cart Cart @relation(fields: [cartCode], references: [code], onUpdate: Cascade, onDelete: Cascade)
  @@map("transactions")
}
